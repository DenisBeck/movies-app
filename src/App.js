import React from 'react';

import './App.css';

const questions = [
  'Что такое утечки памяти?',
  'Плюсы и минусы иммутабельности? Как достичь иммутабельности в JS?',
  'Какие проблемы может вызвать неправильное использование асинхронности в JavaScript?',
  'Что такое оператор логического присваивания?',
  'Разница между JSON и XML?',
  'JS PATTERN(FABRIC ETC)',
  'Типы объектов JavaScript?',
  'Разница между ES6-классами и конструкторами функций?',
  'Что такое функциональное программирование?',
  'Методы строк в JavaScript?',
  'Плюсы и минусы использовании Ajax?',
  'Проблемы при использовании callback-функций?',
  'Разница между host-объектами и нативными объектами?',
  'Proxy и Reflect',
  'Расскажите про координаты в браузере?',
  'Расскажите о queueMicrotask?',
  'Разница между attribute и property у DOM-элементов?',
  'Как работает «сборщик мусора» в JavaScript?',
  'Какие методы используются в регулярных выражениях?',
  'Плюсы и минусы реактивного программирования?',
  'Плюсы и минусы использования use strict?',
  'Разница между методами .push(), .pop(), .shift() и .unshift()?',
  'Что такое шаблонные литералы (Template Literals)?',
  'Виды событий в JavaScript?',
  'Что такое реактивное программирование?',
  'Типы ошибок в JavaScript?',
  'Плюсы и минусы ФП и ООП?',
  'Разница между глубокой (deep) и поверхностной (shallow) копиями объекта? Как сделать каждую из них?',
  'Какие ещё принципы кроме SOLID вы знаете?',
  'Разница между event.target и event.currentTarget?',
  'Что такое композиция в контексте JavaScript?',
  'Что такое область видимости (Scope)?',
  'Плюсы и минусы асинхронного программирования в JavaScript?',
  'Типы паттернов? Типы GOF паттернов?',
  'Что такое прототипное наследование? Как создать объект без прототипа?',
  'Что такое регулярное выражение (Regular Expression)?',
  'Для чего используются методы .flat() и .flatMap()?',
  'Плюсы функционального программирования?',
  'Методы поиска элементов в DOM?',
  'Что такое приватные аксессоры?',
  'Расскажите про статический метод .allSettled()?',
  'Что такое Стек и Куча?',
  'Основные принципы функционального программирования?',
  'Что такое same-origin policy в контексте JavaScript?',
  'Разница между Object и Map?',
  'Почему расширение нативных JavaScript-объектов это плохая практика?',
  'Как определить наличие свойства в объекте?',
  'Подходы при работе с асинхронным кодом?',
  'В чем заключаются особенности геттеров и сеттеров?',
  'Для чего используется ключевое слово new?',
  'Что такое GRASP паттерны?',
  'Назовите способы преобразования массива в объект?',
  'Что такое прототип (Prototype) объекта?',
  'Разница между процедурным и функциональным программированием?',
  'Как использовать media выражения в JavaScript?',
  'Как осуществить перебор элементов в коллекциях Map и Set?',
  'Proxy',
  'Свойства для перемещения по DOM-дереву?',
  'Расскажите о URLSearchParams?',
  'Недостатки паттерна MVW?',
  'Как выполнить несколько асинхронных операций последовательно?',
];

// const filtered = questions.filter((item, index) => [2,5,7,9,12,14,15,16,23,27,30,34,36,39,43,45,48,54,61,63,75,76,80,85,86,88,89,91,92,93,97,99,100,107,110,113,114,124,125,129,130,132,134,140,154,156,158,160,161,165,166,169,173,178,179,184,186,191,195,196,197].includes(index + 1))

// function shuffle(array) {
//   let currentIndex = array.length;

//   // While there remain elements to shuffle...
//   while (currentIndex !== 0) {
//     // Pick a remaining element...
//     const randomIndex = Math.floor(Math.random() * currentIndex);
//     currentIndex--;

//     // And swap it with the current element.
//     // eslint-disable-next-line no-param-reassign
//     [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
//   }
// }

// shuffle(filtered);

// console.log(filtered);

export default function App() {
  return (
    <div className='container'>
      {
        // eslint-disable-next-line react/no-array-index-key
        questions.map((item, index) => <div key={index}><span>{index + 1}. </span> {item}</div>)
      }
    </div>
  );
}
